DARMa

-- 
PHONE CALL WITH GARY:  5/8/2015
Gary indicated looking at OOAD book.
No comment on pattern.
He mentioned Agent or Mediator, but didn't see a direct connection.  IMO not Agent.
We agreed not MVC

--

Per Gary the only way to derive the pattern or the class design is with analysis of requirements and/or a use-case.   He said he couldn't indicate more, but gave me a book to read that he said was most accessible;
	/Users/mikerais/Dropbox/_COMPUTING/_LANGUAGES/_OOD/Use Case Driven Object Modeling with UML.pdf


Write spec.  (e.g. the sequence)
Then diagram:  

--

----
PHONE CALL WITH WITEK

*) Use UML convention if you make a class diagram - currently not using convention.  (e.g. indicators with proper aggregation/composition indicators & multiplicity) 
*) Witek mentions pattern of "Active Record". It is the underlying pattern for ORM. From Wiki demo doesn't look like what I'm trying to do
	http://en.wikipedia.org/wiki/Active_record_pattern
>>) WITEK SUGGESTS THAT:   Seek diagrams Object relational mapping frameworks  


ANALYZING NAMING:  Witek provided convention
*) DarmaMap should be "DarmaModel" - with data model managed in object itself - same objects as getters & setters.
*) DarmaRelay should be "Darma"  (unless you make it web service (e.g RESTful) via interface then DarmaInterface)
     +) main() calls configuration directly
*) DarmaController can contain routing logic - sometimes it's separated.  (e.g. it uses DarmaModel or it uses something else)
*) DarmaConfiguration:   Specifically for configuration.
MORE ON FILENAMING AND FOLDERING (from Witek)
*) Don't dupe service name in anything other than main class "Darma". 
If you subfolder, which is optional for a small group of files,

+) main class goes in root directory:  e.g. Darma.class
+) Also in root folder put configuration.class
Then subfolders:
+) model/record.class
	You name it after the thing.  Witek indicated record partitioning logic in the data model could also go here.
+) controller/recordController.class


------

From further reading
>>Proxy pattern:   The proxy design pattern allows you to provide an interface to other objects by creating a wrapper class as the proxy. The wrapper class, which is the proxy, can add additional functionality to the object of interest without changing the object's code. Below are some of the common examples in which the proxy pattern is used,either for adding or subtracting functionality

Adding security access to an existing object. The proxy will determine if the client can access the object of interest.
Simplifying the API of complex objects. The proxy can provide a simple API so that the client code does not have to deal with the complexity of the object of interest.
Providing interface for remote resources, such as web service or REST resources.

http://en.wikipedia.org/wiki/Proxy_pattern

>>Mediator pattern somewhat relevant by description, but not as much as Proxy pattern: